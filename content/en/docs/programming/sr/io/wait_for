//TITLE:	wait_for: Waiting for IO events
//DESCRIPTION:
//KEYWORDS:
//CONTENT_TYPE:	markdown

wait_for {#wait_for}
=================

Often, you will need to wait on a particular event to occur; an input pin going high, for example. To do this, you will need to use `wait_for`.  In Python, it is possible to override operators (things like `*`, `+`, `<` and `==`, for example).  We have used this feature to make compound waiting conditions more readable, as explained below.

[IO Queries](/docs/programming/sr/io/wait_for#IOQueries) {#IOQueries}
------------

There are a number of things you can `wait_for` with `R.io`:

A digital input pin changing value (high to low, or low to high):

~~~
# Wait for digital input pin 3 on JointIO board 0 to change value
wait_for( R.io[0].input[3].query.d )
~~~

Waiting for a particular digital value:

~~~
# Wait for digital input 3 on JointIO board 0 to become digital '1'
wait_for( R.io[0].input[3].query.d == 1 )
~~~

Waiting for an analogue pin to exceed a particular value:

~~~
# Wait for the reading of analogue input 3 on JointIO board 0 to exceed 1V
wait_for( R.io[0].input[1].query.a > 1 )
~~~

Waiting for an analogue pin to drop below a particular value:

~~~
# Wait for the reading of analogue input 2 on JointIO board 0 to drop below 2.5V
wait_for( R.io[0].input[2].query.a < 2.5 )
~~~

Code situated after these yields in the program flow will not be executed until the specified condition has been met. So, for example, if your robot had the following code:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
from sr import *
R = Robot()

# set output pin 0 high
R.io[0].output[0].d = 1

# wait until digital input 0 goes high
wait_for( R.io[0].input[0].query.d == 1 )

# set output pin 0 low
R.io[0].output[0] = 0
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

...when it was run, output pin 0 would be high and it would stay high until digital input pin 0 went high. When this happens, the next bit of code will execute &mdash; setting output pin 0 low.

Please note that you cannot wait on an analogue input using the equals (`==`) comparison. Because of the nature of analogue-digital conversion (as explained in the [io section](/docs/programming/sr/io#digital_vs_analogue)) it wouldn't make sense to do so.


[Combining Queries Together](/docs/programming/sr/io/wait_for#combining_queries) {#combining_queries}
----------------------------

When you write `R.io[0].input[0].query.d == 0` (for example), the operator overriding comes into play. But before that's explained, another explanation is necessary. When you write `abc = 1 == 1`, the value contained in `abc` afterwards is `True`. `abc` is assigned the value of the logical expression `1 == 1` &mdash; the boolean value, `True`. (If this is a surprise to you, then you should read a [tutorial](/docs/programming/python/).)

This is where the confusing bit occurs &mdash; for the `(...).query.(...)` objects, the operators are overridden so that they no longer compare values; they therefore don't return a boolean value, but another object instead. Because this object is just a representation for a condition that could be met, these conditions can be joined together.


### [More Complex Logic Expressions](/docs/programming/sr/io/wait_for#complex) {#complex}

Logic expressions can also be used with `wait_for`. You could, for example, wait until two conditions are met or perhaps any one of a range of conditions. Here are some examples:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# OR:
wait_for( R.io[0].input[3].query.d == 1, R.io[0].input[2].query.d == 0 )
wait_for( Or( R.io[0].input[3].query.a > 2, R.io[0].input[3].query.a < 3 ) )

# AND:
wait_for( And( R.io[0].input[3].query.d == 1, R.io[0].input[2].query.d == 0 ) )
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

AND means both inputs need to be `True` for execution to continue. OR means either one or both inputs need to be `True` for execution to continue.

If you decide to do this, however, you may need to find out which one occurred (if you're using OR, anyway). To do this, you would use something like the following:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
res = wait_for( R.io[0].input[1].query.a > 1.6,
                And( R.io[0].input[2].query.d == 1,
                     R.io[0].input[3].query.d == 0 ) )

if res[1] != None:
    # res[1][0] is the value of R.io[0].input[2].d
    # res[1][1] is the value of R.io[0].input[3].d
    # (res[0] is None)

elif res[0] == None:
    # res[0] is the value of R.io[0].input[1].query.a
    # res[1] is None (and so res[1][0] and res[1][1] don't exist)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

[Aliasing](/docs/programming/sr/io/wait_for#aliasing) {#aliasing}
----------------------------
Writing things like this:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
R.io[0].input[1].query.d
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

can get quite tiresome.  Luckily, you can create an alias for the above, like so:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
badger = R.io[0].input[1].query.d
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Now you can use this new alias, `badger`, where you would have used `R.io[0].input[1].query.d`:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
wait_for( badger == 1 )
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can go even further than this.  Since `(...).query.(...)` combined with an operator returns an object describing a query, you can remember the query itself in a variable.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
badger = R.io[0].input[1].query.d
badger_present = badger == 1

wait_for( badger_present )
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Note that `badger_present` contains a query, rather than a boolean value.  It is only when the query is passed to `wait_for` that it is evaluated.

[Named Queries](/docs/programming/sr/io/wait_for#named_queries) {#named_queries}
----------------------------
When combining queries together into logical expressions, accessing the results of the query can result in code that is difficult to read.  Therefore, the `wait_for` function can instead take keyword arguments:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
res = wait_for( badger = badger_present,
                porcupine = ( R.io[0].input[2].query.a > 1.3 ) )
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When `wait_for` is used in this way, it returns a different type of object.  Rather than returning a tuple of the results, as it did in the earlier examples, it returns a `namedtuple`.  The results of the query can be accessed using the names that you specified:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
if res.badger != None:
     print "Badger badger badger badger!"
elif res.porcupine != None:
     print "Porcupine detected, with a voltage of", res.porcupine
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
